{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Structure Mining Web Structure Mining atau dalam Bahasa adalah Penambangan struktur web menggunakan teori grafik untuk menganalisis node dan struktur koneksi situs web. Menurut jenis data struktur web, penambangan struktur web dapat dibagi menjadi dua jenis: Mengekstraksi pola dari hyperlink di web: hyperlink adalah komponen struktural yang menghubungkan halaman web ke lokasi yang berbeda. Menambang struktur dokumen: analisis struktur struktur halaman seperti pohon untuk menggambarkan penggunaan tag HTML atau XML. Terminologi penambangan struktur web: Dalam kasus ini saya mengambil web:\"https://www.posindonesia.co.id\" grafik web: grafik diarahkan mewakili web. simpul: halaman web dalam grafik. edge: hyperlinks. dalam derajat: jumlah link yang menunjuk ke simpul tertentu. derajat keluar: jumlah link yang dihasilkan dari simpul tertentu. Teknik penambangan struktur web: PageRank : algoritma ini digunakan oleh Google untuk memberi peringkat hasil pencarian. Nama algoritma ini diberikan oleh pendiri Google Larry Page. Peringkat halaman ditentukan oleh jumlah tautan yang menunjuk ke node target. def getAllLinks(src): # Pencegahan eror apabila link yang diambil mati try: # Get page html ind = src.find(':')+3 url = src[ind:] page = requests.get(src) # Mengubah html ke object beautiful soup soup = BeautifulSoup(page.content, 'html.parser') # GET all tag <a> tags = soup.findAll(\"a\") links = [] for tag in tags: # Pencegahan eror apabila link tidak memiliki href try: # Get all link link = tag['href'] if not link in links and 'http' in link: links.append(link) except KeyError: pass return links except: #print(\"Error 404 : Page \"+src+\" not found\") return list() Graph Teori graph atau teori grafik dalam matematika dan ilmu komputeradalah cabang kajian yang mempelajari sifat-sifat \"graf\" atau \"grafik\" . suatu graf adalah himpunan benda-benda yang disebut \"simpul\"( vertex atau node ) yang terhubung oleh \"sisi\" ( edge ) atau \"busur\" ( arc ). Biasanya graf digambarkan sebagai kumpulan titik-titik (melambangkan \"simpul\") yang dihubungkan oleh garis-garis (melambangkan \"sisi\") atau garis berpanah (melambangkan \"busur\"). Suatu sisi dapat menghubungkan suatu simpul dengan simpul yang sama. Sisi yang demikian dinamakan \"gelang\"( loop ). #membuat Graph g = nx.Graph() #mengubah graph menjadi graph berarah g = g.to_directed() # Masukin ke Graph g.add_edges_from(edgelist) # deklarasi pos (koordinat) (otomatis) pos = nx.spring_layout(g) # hitung pagerank pr = nx.pagerank(g) # Membuat Label && print pagerank print(\"keterangan node:\") nodelist = g.nodes label= {} for i, key in enumerate(nodelist): label[key]=i print(i, key, pr[key]) # Draw Graph #plt.figure(1) plt.title('circle_layout') nx.draw(g, pos) nx.draw_networkx_labels(g, pos, label) # show figure plt.axis(\"off\") plt.show()","title":"Home"},{"location":"#web-structure-mining","text":"Web Structure Mining atau dalam Bahasa adalah Penambangan struktur web menggunakan teori grafik untuk menganalisis node dan struktur koneksi situs web. Menurut jenis data struktur web, penambangan struktur web dapat dibagi menjadi dua jenis: Mengekstraksi pola dari hyperlink di web: hyperlink adalah komponen struktural yang menghubungkan halaman web ke lokasi yang berbeda. Menambang struktur dokumen: analisis struktur struktur halaman seperti pohon untuk menggambarkan penggunaan tag HTML atau XML. Terminologi penambangan struktur web: Dalam kasus ini saya mengambil web:\"https://www.posindonesia.co.id\" grafik web: grafik diarahkan mewakili web. simpul: halaman web dalam grafik. edge: hyperlinks. dalam derajat: jumlah link yang menunjuk ke simpul tertentu. derajat keluar: jumlah link yang dihasilkan dari simpul tertentu. Teknik penambangan struktur web: PageRank : algoritma ini digunakan oleh Google untuk memberi peringkat hasil pencarian. Nama algoritma ini diberikan oleh pendiri Google Larry Page. Peringkat halaman ditentukan oleh jumlah tautan yang menunjuk ke node target. def getAllLinks(src): # Pencegahan eror apabila link yang diambil mati try: # Get page html ind = src.find(':')+3 url = src[ind:] page = requests.get(src) # Mengubah html ke object beautiful soup soup = BeautifulSoup(page.content, 'html.parser') # GET all tag <a> tags = soup.findAll(\"a\") links = [] for tag in tags: # Pencegahan eror apabila link tidak memiliki href try: # Get all link link = tag['href'] if not link in links and 'http' in link: links.append(link) except KeyError: pass return links except: #print(\"Error 404 : Page \"+src+\" not found\") return list()","title":"Web Structure Mining"},{"location":"#graph","text":"Teori graph atau teori grafik dalam matematika dan ilmu komputeradalah cabang kajian yang mempelajari sifat-sifat \"graf\" atau \"grafik\" . suatu graf adalah himpunan benda-benda yang disebut \"simpul\"( vertex atau node ) yang terhubung oleh \"sisi\" ( edge ) atau \"busur\" ( arc ). Biasanya graf digambarkan sebagai kumpulan titik-titik (melambangkan \"simpul\") yang dihubungkan oleh garis-garis (melambangkan \"sisi\") atau garis berpanah (melambangkan \"busur\"). Suatu sisi dapat menghubungkan suatu simpul dengan simpul yang sama. Sisi yang demikian dinamakan \"gelang\"( loop ). #membuat Graph g = nx.Graph() #mengubah graph menjadi graph berarah g = g.to_directed() # Masukin ke Graph g.add_edges_from(edgelist) # deklarasi pos (koordinat) (otomatis) pos = nx.spring_layout(g) # hitung pagerank pr = nx.pagerank(g) # Membuat Label && print pagerank print(\"keterangan node:\") nodelist = g.nodes label= {} for i, key in enumerate(nodelist): label[key]=i print(i, key, pr[key]) # Draw Graph #plt.figure(1) plt.title('circle_layout') nx.draw(g, pos) nx.draw_networkx_labels(g, pos, label) # show figure plt.axis(\"off\") plt.show()","title":"Graph"}]}